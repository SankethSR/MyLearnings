# Angular Interview Preparation Guide

## Core Angular Concepts
### Components, Directives, Pipes, Services, Dependency Injection
- **Components**: Building blocks of Angular applications.
- **Directives**: Attribute & structural directives (e.g., `ngIf`, `ngFor`).
- **Pipes**: Transform data in templates (`uppercase`, `date`, `custom pipes`).
- **Services & Dependency Injection**: Share logic across components.

## Advanced Angular Topics
### Change Detection
- **Default**: Checks the entire component tree.
- **OnPush**: Checks only when `@Input` changes (better performance).
- **ChangeDetectorRef**: Manually trigger change detection.

```typescript
@Component({
  selector: 'app-demo',
  template: `<p>{{ data }}</p>`,
  changeDetection: ChangeDetectionStrategy.OnPush
})
```

### State Management
#### NgRx (Redux-style State Management)
- **Store**: Holds the application state.
- **Actions**: Events that modify state.
- **Reducers**: Define how state changes.
- **Selectors**: Extract slices of state.
- **Effects**: Handle side effects (e.g., API calls).

#### Akita (Simpler alternative to NgRx)
- Stores, Queries, Entities, Actions.

#### Angular Signals (Introduced in Angular 16)
- **Signals**: Reactive variables.
- **Computed**: Derive new values.
- **Effects**: Run side effects.

#### Earlier State Management Approaches
1. Component state
2. `@Input()` & `@Output()`
3. Services with `BehaviorSubject`
4. LocalStorage / SessionStorage
5. EventEmitters

## Performance Optimization
### Lazy Loading Modules
- Load feature modules only when needed.
- Example:

```typescript
const routes: Routes = [
  { path: 'feature', loadChildren: () => import('./feature.module').then(m => m.FeatureModule) }
];
```

### Optimizing RxJS & Async Operations
- **Debounce API calls**

```typescript
this.searchBarValue.pipe(
  debounceTime(300),
  switchMap(() => this.http.get("url")),
  shareReplay(1)
).subscribe(value => this.resultValue = value);
```

- **`switchMap()`**: Cancels previous request before making a new one.
- **`tap()`**: Logs values without affecting stream.

### `trackBy` in `ngFor`
- Improves performance by reducing DOM updates.

```typescript
<li *ngFor="let user of users; trackBy: trackById">{{ user.name }}</li>
```

### Tree Shaking
- Removes unused code from the final bundle.
- Use:
  - `npm prune`
  - `npm dedupe`

## Caching & Storage in Angular
### Types of Caching
1. **Browser Caching**: Controlled by server headers (`Cache-Control`, `ETag`).
2. **HTTP Request Caching**: Store API responses for reuse.
3. **Service Worker (PWA Caching)**: Cache assets & API responses.
4. **RxJS Caching (`shareReplay(1)`)**: Reuse API results across multiple subscribers.

### Storage Types
1. **Cookies**
2. **Local Storage**
3. **Session Storage**
4. **Cache Storage** (Service Worker controlled)
5. **IndexedDB**

## Reusability in Angular
### Content Projection (`ng-content`)
- Allows inserting content into a component dynamically.

```html
<app-card>
  <h2>Title</h2>
  <p>Description</p>
</app-card>
```

```typescript
@Component({
  selector: 'app-card',
  template: `<ng-content></ng-content>`
})
```

---

This document is designed to serve as a quick reference for interview preparation. Let me know if you need modifications or additional explanations!
